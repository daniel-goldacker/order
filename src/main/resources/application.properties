quarkus.http.port=8082

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=admin
quarkus.datasource.password=admin

# LOCAL
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/orderdb
#quarkus.hibernate-orm.database.generation=drop-and-create
#quarkus.rest-client.customer-api.url=http://localhost:8080/api
#quarkus.rest-client.product-api.url=http://localhost:8081/api
#quarkus.oidc.auth-server-url=http://localhost:8085/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret

# DOCKER
quarkus.datasource.jdbc.url=jdbc:postgresql://db-order:5432/orderdb
quarkus.hibernate-orm.database.generation=update
quarkus.rest-client.customer-api.url=http://app-customer:8083/api
quarkus.rest-client.product-api.url=http://app-product:8081/api
quarkus.oidc.auth-server-url=http://keycloak:8080/realms/quarkus
quarkus.oidc.client-id=backend-service

# O Keycloak é acessado de formas diferentes:
# - Fora do container (Postman/host): http://localhost:8080/realms/quarkus
# - Dentro do container (rede Docker): http://keycloak:8080/realms/quarkus
#
# O token gerado fora do container tem "iss=http://localhost:8080/realms/quarkus",
# que não bate com a URL interna (keycloak:8080).
#
# Essas propriedades dizem ao Quarkus para aceitar explicitamente esse issuer,
# garantindo que os tokens emitidos via localhost também sejam válidos.
quarkus.oidc.token.issuer=http://localhost:8080/realms/quarkus
quarkus.oidc.token.issuer-required=true
quarkus.oidc.credentials.secret=secret